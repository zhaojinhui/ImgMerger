package imgmerger;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.dnd.DropTarget;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.imageio.ImageIO;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jinhui Zhao
 */
public class ImgMerger extends javax.swing.JFrame {

    /**
     * Creates new form ImgMerger
     */
    public static String sourcePath;
    final static String PROPERTYFILENAME = "configure.properties";
    public static ImgMerger imgMerger = null;
    public static javax.swing.JTextArea logInfoArea = null;
    static Properties props;
    DropTarget dropTarget;
    
    public ImgMerger() {
        props = new Properties();
        imgMerger = this;
        InputStream is;
        try {
            is = new FileInputStream(new File(PROPERTYFILENAME));
        } catch(Exception e) {
            is = null;
        }
        try {
            if(is == null)
                is = getClass().getResourceAsStream(PROPERTYFILENAME);
            props.load(is);
        } catch(Exception e) {
        }
        initComponents();
        lRotateDropdown.addItem("0");
        lRotateDropdown.addItem("90");
        lRotateDropdown.addItem("180");
        lRotateDropdown.addItem("270");

        rRotateDropdown.addItem("0");
        rRotateDropdown.addItem("90");
        rRotateDropdown.addItem("180");
        rRotateDropdown.addItem("270");
        
        outputFilePath.setText(props.getProperty("outputPath"));
        lRotateDropdown.select(props.getProperty("lRotateDegree"));
        lPicPath.setText(props.getProperty("leftPicPath"));
        rRotateDropdown.select(props.getProperty("rRotateDegree"));
        rPicPath.setText(props.getProperty("rightPicPath"));
        logoPath.setText(props.getProperty("logoPath"));
        //saveStyle = saveWithoutFile.isSelected();
        logInfoArea = logInfo;
        PanelDragDropListener panelDragDropListener = new PanelDragDropListener();
        dropTarget = new DropTarget(filePathReader, panelDragDropListener);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outputFilePathText = new javax.swing.JLabel();
        outputFilePath = new javax.swing.JTextField();
        filePathReader = new javax.swing.JPanel();
        dragSourceFileText = new javax.swing.JLabel();
        saveConfig = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lPicTable = new javax.swing.JLabel();
        rPicPath = new javax.swing.JTextField();
        lPicPath = new javax.swing.JTextField();
        logoPath = new javax.swing.JTextField();
        logoText = new javax.swing.JLabel();
        rRotateDegree = new javax.swing.JLabel();
        rRotateDropdown = new java.awt.Choice();
        lRotateDropdown = new java.awt.Choice();
        lRotateDegreeText = new javax.swing.JLabel();
        saveWithoutFile = new javax.swing.JCheckBox();
        logInfoText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputFilePathText.setText("Output Path:");

        filePathReader.setBackground(new java.awt.Color(255, 255, 255));
        filePathReader.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout filePathReaderLayout = new javax.swing.GroupLayout(filePathReader);
        filePathReader.setLayout(filePathReaderLayout);
        filePathReaderLayout.setHorizontalGroup(
            filePathReaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        filePathReaderLayout.setVerticalGroup(
            filePathReaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 72, Short.MAX_VALUE)
        );

        dragSourceFileText.setText("Drag Source File to here:");

        saveConfig.setText("Save");
        saveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigActionPerformed(evt);
            }
        });

        jLabel1.setText("Right Pic Path:");

        lPicTable.setText("Left Pic Path:");

        logoText.setText("Logo Path:");

        rRotateDegree.setText("Right Rotate Degree:");

        lRotateDegreeText.setText("Left RotateDegree:");

        saveWithoutFile.setText("Save Without File");

        logInfoText.setText("Log Infomation:");

        logInfo.setColumns(20);
        logInfo.setRows(5);
        jScrollPane1.setViewportView(logInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filePathReader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(outputFilePathText)
                            .addComponent(jLabel1)
                            .addComponent(lPicTable)
                            .addComponent(logoText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputFilePath)
                            .addComponent(rPicPath)
                            .addComponent(lPicPath)
                            .addComponent(logoPath)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logInfoText)
                            .addComponent(dragSourceFileText)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(saveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveWithoutFile))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rRotateDegree)
                                .addGap(1, 1, 1)
                                .addComponent(rRotateDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(lRotateDegreeText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lRotateDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 19, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFilePathText)
                    .addComponent(outputFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(rPicPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lPicTable)
                    .addComponent(lPicPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logoPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rRotateDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rRotateDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRotateDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRotateDegreeText))
                .addGap(10, 10, 10)
                .addComponent(dragSourceFileText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePathReader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logInfoText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveConfig)
                    .addComponent(saveWithoutFile))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void saveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigActionPerformed
        // TODO add your handling code here:
        saveConfigureProperties();
    }//GEN-LAST:event_saveConfigActionPerformed

    private void saveConfigureProperties() {
        try {
            Properties props = new Properties();
            props.setProperty("outputPath", outputFilePath.getText());
            props.setProperty("leftPicPath", lPicPath.getText());
            props.setProperty("rightPicPath", rPicPath.getText());
            props.setProperty("lRotateDegree", lRotateDropdown.getSelectedItem());
            props.setProperty("rRotateDegree", rRotateDropdown.getSelectedItem());
            props.setProperty("logoPath", logoPath.getText());
            OutputStream out = new FileOutputStream(new File(PROPERTYFILENAME));
            props.store(out, "Store the configure values");
        } catch(Exception e) {
        }
    }
    
    public static boolean getSaveStyle() {
        imgMerger.logInfo.setCaretPosition(imgMerger.logInfo.getDocument().getLength());
        return imgMerger.saveWithoutFile.isSelected();
    }
    
    public static void addLogInfo(String logMsg) {
        imgMerger.logInfo.setCaretPosition(imgMerger.logInfo.getDocument().getLength());
        imgMerger.logInfo.append(logMsg);
    } 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImgMerger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImgMerger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImgMerger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImgMerger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImgMerger().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dragSourceFileText;
    private javax.swing.JPanel filePathReader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lPicPath;
    private javax.swing.JLabel lPicTable;
    private javax.swing.JLabel lRotateDegreeText;
    private java.awt.Choice lRotateDropdown;
    private javax.swing.JTextArea logInfo;
    private javax.swing.JLabel logInfoText;
    private javax.swing.JTextField logoPath;
    private javax.swing.JLabel logoText;
    private javax.swing.JTextField outputFilePath;
    private javax.swing.JLabel outputFilePathText;
    private javax.swing.JTextField rPicPath;
    private javax.swing.JLabel rRotateDegree;
    private java.awt.Choice rRotateDropdown;
    private javax.swing.JButton saveConfig;
    private javax.swing.JCheckBox saveWithoutFile;
    // End of variables declaration//GEN-END:variables
}
